1.设置名字和Email地址：
	$ git config --global user.name "Your Name"
	$ git config --global user.email "email@example.com"
		(注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，
		当然也可以对某个仓库指定不同的用户名和Email地址。)

2.创建版本库:
	$ git init

3.提交文件：
	$ git add "文件名"
	$ git commit -m "提交信息"

4.查看仓库当前的状态：
	$ git status

5.查看文件上次修改内容(difference)：
	$ git diff "文件名"
		(工作区(work dict)和暂存区(stage)的比较)
	$ git diff --cached "文件名"
		(暂存区(stage)和分支(master)的比较)
	$ git diff HEAD -- "文件名"
		(工作区(work dict)和分支(master)的比较)

6.查看日志(按时间从近到远显示)：
	$ git log
		(HEAD指向的版本就是当前版本，也就是最新的提交)
7.简化日志信息：
	$ git log --oneline
		(显示commit id前7位)
	$ git log --pretty=oneline
		(显示全部commit id)

8.回退到上一个版本：
	$ git reset --hard HEAD^
		(上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本HEAD~100)
	$ git reset --hard "id"
		(按"commit id"回到版本)
	$ git reset HEAD "文件名"
		(把暂存区的修改撤销掉(unstage))

9.查看所有操作记录：
	$ git reflog

10.撤销指定文件在工作区的修改：
$ git checkout -- "文件名"
	(一：readme.txt自修改后还没有被放到暂存区，撤销修改就回到和版本库一模一样的状态；)
	(二：readme.txt已经添加到暂存区后，又作了修改，撤销修改就回到添加到暂存区后的状态。)
	(总之，就是让这个文件回到最近一次git commit或git add时的状态。)
	
11.删除文件(在目录删除文件后)：
	(1)$ git rm "文件名" 或 $ git add "文件名"
	(2)commit


12.远程库：
	(1)关联远程库：
		$ git remote add origin git@github.com:"github账号"/"仓库名".git
	(2)把本地库的内容推送到远程库：
		$ git push -u origin master
		
		
13.克隆远程库：
	git clone git@github.com:"github账号"/"仓库名".git